"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...

    #create is true and files don't exist
    if create and (self.Afn and self.Bfn not in listfiles()):
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)

      self.Afile.writeat('SE',0)
      self.Bfile.writeat('SE',0)


    #create = true and files exist
    #elif create:
    #  self.Afile = openfile(self.Afn,create)
    #  self.Bfile = openfile(self.Bfn,create)

      #writes the contents of files A and B to files if they already exist
      #self.Afile.writeat(self.Afile.readat(none,0),0)
      #self.Bfile.writeat(self.Bfile.readat(none,0),0)

    #create is false and files don't exist
    else:
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)



  def writeat(self,data,offset):

    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data,offset)

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)

  def close(self):
    #defines checks A and B in order to see if they begin with S and end with E
    checkA=self.Afile.readat(None,0)
    checkB=self.Bfile.readat(None,0)

    #checks if starting and end characters are valid
    if (checkA.startswith("S") and checkA.endswith("E")) and (checkB.startswith("S") and checkB.endswith("E")):

      #replaces original with the content of checkB
      self.Afile.writeat(checkB,0)

    else:
      self.Bfile.writeat(checkA,0)

    self.Afile.close()
    self.Bfile.close()


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
